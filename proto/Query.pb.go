// Code generated by protoc-gen-go. DO NOT EDIT.
// source: Query.proto

package proto

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// A single query, which is sent from the client to the node. This includes all possible queries. Each Query should not have more than 50 levels.
type Query struct {
	// Types that are valid to be assigned to Query:
	//	*Query_GetByKey
	//	*Query_GetBySolidityID
	//	*Query_ContractCallLocal
	//	*Query_ContractGetInfo
	//	*Query_ContractGetBytecode
	//	*Query_ContractGetRecords
	//	*Query_CryptogetAccountBalance
	//	*Query_CryptoGetAccountRecords
	//	*Query_CryptoGetInfo
	//	*Query_CryptoGetClaim
	//	*Query_CryptoGetProxyStakers
	//	*Query_FileGetContents
	//	*Query_FileGetInfo
	//	*Query_TransactionGetReceipt
	//	*Query_TransactionGetRecord
	//	*Query_TransactionGetFastRecord
	Query                isQuery_Query `protobuf_oneof:"query"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *Query) Reset()         { *m = Query{} }
func (m *Query) String() string { return proto.CompactTextString(m) }
func (*Query) ProtoMessage()    {}
func (*Query) Descriptor() ([]byte, []int) {
	return fileDescriptor_12565a3f476cd53f, []int{0}
}

func (m *Query) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Query.Unmarshal(m, b)
}
func (m *Query) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Query.Marshal(b, m, deterministic)
}
func (m *Query) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Query.Merge(m, src)
}
func (m *Query) XXX_Size() int {
	return xxx_messageInfo_Query.Size(m)
}
func (m *Query) XXX_DiscardUnknown() {
	xxx_messageInfo_Query.DiscardUnknown(m)
}

var xxx_messageInfo_Query proto.InternalMessageInfo

type isQuery_Query interface {
	isQuery_Query()
}

type Query_GetByKey struct {
	GetByKey *GetByKeyQuery `protobuf:"bytes,1,opt,name=getByKey,proto3,oneof"`
}

type Query_GetBySolidityID struct {
	GetBySolidityID *GetBySolidityIDQuery `protobuf:"bytes,2,opt,name=getBySolidityID,proto3,oneof"`
}

type Query_ContractCallLocal struct {
	ContractCallLocal *ContractCallLocalQuery `protobuf:"bytes,3,opt,name=contractCallLocal,proto3,oneof"`
}

type Query_ContractGetInfo struct {
	ContractGetInfo *ContractGetInfoQuery `protobuf:"bytes,4,opt,name=contractGetInfo,proto3,oneof"`
}

type Query_ContractGetBytecode struct {
	ContractGetBytecode *ContractGetBytecodeQuery `protobuf:"bytes,5,opt,name=contractGetBytecode,proto3,oneof"`
}

type Query_ContractGetRecords struct {
	ContractGetRecords *ContractGetRecordsQuery `protobuf:"bytes,6,opt,name=ContractGetRecords,proto3,oneof"`
}

type Query_CryptogetAccountBalance struct {
	CryptogetAccountBalance *CryptoGetAccountBalanceQuery `protobuf:"bytes,7,opt,name=cryptogetAccountBalance,proto3,oneof"`
}

type Query_CryptoGetAccountRecords struct {
	CryptoGetAccountRecords *CryptoGetAccountRecordsQuery `protobuf:"bytes,8,opt,name=cryptoGetAccountRecords,proto3,oneof"`
}

type Query_CryptoGetInfo struct {
	CryptoGetInfo *CryptoGetInfoQuery `protobuf:"bytes,9,opt,name=cryptoGetInfo,proto3,oneof"`
}

type Query_CryptoGetClaim struct {
	CryptoGetClaim *CryptoGetClaimQuery `protobuf:"bytes,10,opt,name=cryptoGetClaim,proto3,oneof"`
}

type Query_CryptoGetProxyStakers struct {
	CryptoGetProxyStakers *CryptoGetStakersQuery `protobuf:"bytes,11,opt,name=cryptoGetProxyStakers,proto3,oneof"`
}

type Query_FileGetContents struct {
	FileGetContents *FileGetContentsQuery `protobuf:"bytes,12,opt,name=fileGetContents,proto3,oneof"`
}

type Query_FileGetInfo struct {
	FileGetInfo *FileGetInfoQuery `protobuf:"bytes,13,opt,name=fileGetInfo,proto3,oneof"`
}

type Query_TransactionGetReceipt struct {
	TransactionGetReceipt *TransactionGetReceiptQuery `protobuf:"bytes,14,opt,name=transactionGetReceipt,proto3,oneof"`
}

type Query_TransactionGetRecord struct {
	TransactionGetRecord *TransactionGetRecordQuery `protobuf:"bytes,15,opt,name=transactionGetRecord,proto3,oneof"`
}

type Query_TransactionGetFastRecord struct {
	TransactionGetFastRecord *TransactionGetFastRecordQuery `protobuf:"bytes,16,opt,name=transactionGetFastRecord,proto3,oneof"`
}

func (*Query_GetByKey) isQuery_Query() {}

func (*Query_GetBySolidityID) isQuery_Query() {}

func (*Query_ContractCallLocal) isQuery_Query() {}

func (*Query_ContractGetInfo) isQuery_Query() {}

func (*Query_ContractGetBytecode) isQuery_Query() {}

func (*Query_ContractGetRecords) isQuery_Query() {}

func (*Query_CryptogetAccountBalance) isQuery_Query() {}

func (*Query_CryptoGetAccountRecords) isQuery_Query() {}

func (*Query_CryptoGetInfo) isQuery_Query() {}

func (*Query_CryptoGetClaim) isQuery_Query() {}

func (*Query_CryptoGetProxyStakers) isQuery_Query() {}

func (*Query_FileGetContents) isQuery_Query() {}

func (*Query_FileGetInfo) isQuery_Query() {}

func (*Query_TransactionGetReceipt) isQuery_Query() {}

func (*Query_TransactionGetRecord) isQuery_Query() {}

func (*Query_TransactionGetFastRecord) isQuery_Query() {}

func (m *Query) GetQuery() isQuery_Query {
	if m != nil {
		return m.Query
	}
	return nil
}

func (m *Query) GetGetByKey() *GetByKeyQuery {
	if x, ok := m.GetQuery().(*Query_GetByKey); ok {
		return x.GetByKey
	}
	return nil
}

func (m *Query) GetGetBySolidityID() *GetBySolidityIDQuery {
	if x, ok := m.GetQuery().(*Query_GetBySolidityID); ok {
		return x.GetBySolidityID
	}
	return nil
}

func (m *Query) GetContractCallLocal() *ContractCallLocalQuery {
	if x, ok := m.GetQuery().(*Query_ContractCallLocal); ok {
		return x.ContractCallLocal
	}
	return nil
}

func (m *Query) GetContractGetInfo() *ContractGetInfoQuery {
	if x, ok := m.GetQuery().(*Query_ContractGetInfo); ok {
		return x.ContractGetInfo
	}
	return nil
}

func (m *Query) GetContractGetBytecode() *ContractGetBytecodeQuery {
	if x, ok := m.GetQuery().(*Query_ContractGetBytecode); ok {
		return x.ContractGetBytecode
	}
	return nil
}

func (m *Query) GetContractGetRecords() *ContractGetRecordsQuery {
	if x, ok := m.GetQuery().(*Query_ContractGetRecords); ok {
		return x.ContractGetRecords
	}
	return nil
}

func (m *Query) GetCryptogetAccountBalance() *CryptoGetAccountBalanceQuery {
	if x, ok := m.GetQuery().(*Query_CryptogetAccountBalance); ok {
		return x.CryptogetAccountBalance
	}
	return nil
}

func (m *Query) GetCryptoGetAccountRecords() *CryptoGetAccountRecordsQuery {
	if x, ok := m.GetQuery().(*Query_CryptoGetAccountRecords); ok {
		return x.CryptoGetAccountRecords
	}
	return nil
}

func (m *Query) GetCryptoGetInfo() *CryptoGetInfoQuery {
	if x, ok := m.GetQuery().(*Query_CryptoGetInfo); ok {
		return x.CryptoGetInfo
	}
	return nil
}

func (m *Query) GetCryptoGetClaim() *CryptoGetClaimQuery {
	if x, ok := m.GetQuery().(*Query_CryptoGetClaim); ok {
		return x.CryptoGetClaim
	}
	return nil
}

func (m *Query) GetCryptoGetProxyStakers() *CryptoGetStakersQuery {
	if x, ok := m.GetQuery().(*Query_CryptoGetProxyStakers); ok {
		return x.CryptoGetProxyStakers
	}
	return nil
}

func (m *Query) GetFileGetContents() *FileGetContentsQuery {
	if x, ok := m.GetQuery().(*Query_FileGetContents); ok {
		return x.FileGetContents
	}
	return nil
}

func (m *Query) GetFileGetInfo() *FileGetInfoQuery {
	if x, ok := m.GetQuery().(*Query_FileGetInfo); ok {
		return x.FileGetInfo
	}
	return nil
}

func (m *Query) GetTransactionGetReceipt() *TransactionGetReceiptQuery {
	if x, ok := m.GetQuery().(*Query_TransactionGetReceipt); ok {
		return x.TransactionGetReceipt
	}
	return nil
}

func (m *Query) GetTransactionGetRecord() *TransactionGetRecordQuery {
	if x, ok := m.GetQuery().(*Query_TransactionGetRecord); ok {
		return x.TransactionGetRecord
	}
	return nil
}

func (m *Query) GetTransactionGetFastRecord() *TransactionGetFastRecordQuery {
	if x, ok := m.GetQuery().(*Query_TransactionGetFastRecord); ok {
		return x.TransactionGetFastRecord
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Query) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Query_GetByKey)(nil),
		(*Query_GetBySolidityID)(nil),
		(*Query_ContractCallLocal)(nil),
		(*Query_ContractGetInfo)(nil),
		(*Query_ContractGetBytecode)(nil),
		(*Query_ContractGetRecords)(nil),
		(*Query_CryptogetAccountBalance)(nil),
		(*Query_CryptoGetAccountRecords)(nil),
		(*Query_CryptoGetInfo)(nil),
		(*Query_CryptoGetClaim)(nil),
		(*Query_CryptoGetProxyStakers)(nil),
		(*Query_FileGetContents)(nil),
		(*Query_FileGetInfo)(nil),
		(*Query_TransactionGetReceipt)(nil),
		(*Query_TransactionGetRecord)(nil),
		(*Query_TransactionGetFastRecord)(nil),
	}
}

func init() {
	proto.RegisterType((*Query)(nil), "proto.Query")
}

func init() { proto.RegisterFile("Query.proto", fileDescriptor_12565a3f476cd53f) }

var fileDescriptor_12565a3f476cd53f = []byte{
	// 571 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x94, 0x51, 0x6f, 0xd3, 0x3e,
	0x14, 0xc5, 0xff, 0xfd, 0x43, 0xb7, 0x71, 0xcb, 0x3a, 0xe6, 0xb5, 0xd4, 0xeb, 0xd8, 0x18, 0x03,
	0x21, 0x9e, 0xfa, 0x30, 0x1e, 0x79, 0x5a, 0x3b, 0xad, 0x4c, 0x80, 0x54, 0xd6, 0x09, 0x89, 0x27,
	0xe4, 0x39, 0x6e, 0x1b, 0xc8, 0xe2, 0xe0, 0x7a, 0x88, 0x7c, 0x05, 0x3e, 0x35, 0xea, 0x9d, 0x9d,
	0xc6, 0x8e, 0xc3, 0x53, 0x95, 0x7b, 0xee, 0xf9, 0xc5, 0xe9, 0x3d, 0xbe, 0xd0, 0xfa, 0x7c, 0x27,
	0x54, 0x3e, 0xc8, 0x94, 0xd4, 0x92, 0x34, 0xf1, 0xa7, 0xdf, 0x1e, 0x0b, 0x3d, 0xcc, 0x3f, 0x08,
	0x53, 0xee, 0x77, 0xf1, 0x79, 0x2a, 0x93, 0x38, 0x8a, 0x75, 0x7e, 0x79, 0x6e, 0xca, 0xbd, 0x91,
	0x4c, 0xb5, 0x62, 0x5c, 0x8f, 0x58, 0x92, 0x7c, 0x94, 0x9c, 0x25, 0xb6, 0xdf, 0x0a, 0x63, 0xa1,
	0x2f, 0xd3, 0x99, 0x34, 0xe5, 0xfd, 0x52, 0x79, 0x98, 0x6b, 0xc1, 0x65, 0x24, 0x8c, 0x44, 0x4b,
	0xd2, 0x95, 0xe0, 0x52, 0x45, 0x4b, 0xa3, 0x1c, 0x8e, 0x54, 0x9e, 0x69, 0x39, 0x16, 0xfa, 0x8c,
	0x73, 0x79, 0x97, 0xea, 0x21, 0x4b, 0x58, 0xca, 0x45, 0x9d, 0xec, 0xba, 0xf7, 0x0a, 0xb9, 0x74,
	0x8e, 0x4e, 0x51, 0x1c, 0x25, 0x2c, 0xbe, 0x35, 0xd5, 0xa7, 0x45, 0x75, 0xaa, 0xd9, 0x0f, 0xa1,
	0x2c, 0xa2, 0x7b, 0x11, 0x27, 0x62, 0xd5, 0x2b, 0x53, 0x2d, 0x52, 0x6d, 0xcb, 0xbb, 0xa6, 0x5c,
	0xe2, 0x1e, 0x5c, 0x2b, 0x96, 0x2e, 0x19, 0xd7, 0xb1, 0x4c, 0xef, 0xbf, 0x43, 0xc4, 0x99, 0x36,
	0x62, 0xbf, 0x22, 0x4a, 0x15, 0x19, 0xed, 0xc8, 0xd5, 0x2e, 0xd8, 0xd2, 0xd1, 0x4f, 0xfe, 0x00,
	0x34, 0x71, 0x4c, 0xe4, 0x14, 0xb6, 0xe6, 0x66, 0x36, 0xb4, 0x71, 0xdc, 0x78, 0xd3, 0x3a, 0xed,
	0xdc, 0xf7, 0x0c, 0xec, 0xc8, 0xb0, 0xef, 0xfd, 0x7f, 0x57, 0x45, 0x1f, 0x19, 0xc3, 0xce, 0xdc,
	0x9d, 0x1f, 0xfd, 0x1f, 0xad, 0x07, 0x65, 0xeb, 0x5a, 0xb5, 0x04, 0xdf, 0x45, 0x3e, 0xc1, 0x2e,
	0xf7, 0x27, 0x4e, 0x1f, 0x20, 0xea, 0xd0, 0xa0, 0x2a, 0x89, 0xb0, 0xb0, 0xaa, 0x73, 0x75, 0x2e,
	0xee, 0xe6, 0x84, 0x3e, 0x74, 0xce, 0xe5, 0xa5, 0xa8, 0x38, 0x97, 0xe7, 0x22, 0x53, 0xd8, 0xe3,
	0xd5, 0x64, 0xd1, 0x26, 0xc2, 0x9e, 0x57, 0x61, 0xb6, 0xc3, 0x02, 0x43, 0x6e, 0x32, 0x01, 0x52,
	0xcd, 0x24, 0xdd, 0x40, 0xe6, 0x51, 0x95, 0x69, 0x1a, 0x2c, 0x32, 0xe0, 0x25, 0xdf, 0xa0, 0xc7,
	0x31, 0x62, 0x73, 0x3f, 0xcb, 0x74, 0x13, 0xb1, 0x2f, 0x2d, 0x36, 0x9c, 0x78, 0xcb, 0xae, 0xa3,
	0xac, 0x5f, 0x50, 0xb9, 0x0d, 0x74, 0xeb, 0x9f, 0x2f, 0xf0, 0x0e, 0x5f, 0x47, 0x21, 0x67, 0xb0,
	0xcd, 0xcb, 0xf7, 0x89, 0x3e, 0x42, 0xec, 0xbe, 0x8f, 0x2d, 0x4f, 0xcb, 0x75, 0x90, 0x73, 0x68,
	0x73, 0xe7, 0xf6, 0x51, 0x40, 0x46, 0xdf, 0x67, 0xa0, 0x68, 0x21, 0x9e, 0x87, 0x5c, 0x43, 0xb7,
	0xa8, 0x4c, 0x94, 0xfc, 0x9d, 0x9b, 0x2b, 0x4b, 0x5b, 0x08, 0x7b, 0xe6, 0xc3, 0x8c, 0x6c, 0x71,
	0x61, 0xf3, 0x2a, 0x90, 0x33, 0xf7, 0xae, 0xd3, 0xc7, 0x4e, 0x20, 0xbd, 0x4d, 0x50, 0x04, 0xd2,
	0x73, 0x91, 0x77, 0xd0, 0x9a, 0xad, 0xb7, 0x03, 0xdd, 0x46, 0x48, 0xcf, 0x85, 0x94, 0xff, 0xa3,
	0x72, 0x37, 0xf9, 0x0a, 0x5d, 0x1d, 0xda, 0x23, 0xb4, 0x8d, 0x98, 0x17, 0x06, 0x13, 0xdc, 0x35,
	0xc5, 0x07, 0x06, 0x09, 0xe4, 0x0b, 0x74, 0x74, 0x60, 0x0b, 0xd1, 0x1d, 0x24, 0x1f, 0xd7, 0x91,
	0xa5, 0x8a, 0x2c, 0x38, 0xe8, 0x27, 0x37, 0x40, 0x75, 0xcd, 0x06, 0xa3, 0x4f, 0x90, 0xfd, 0x2a,
	0xc8, 0x5e, 0xb7, 0x59, 0x7e, 0x2d, 0x67, 0xb8, 0x09, 0xcd, 0x9f, 0xab, 0xa6, 0xe1, 0x6b, 0x38,
	0xe1, 0xf2, 0x76, 0xb0, 0x10, 0x91, 0x50, 0x6c, 0xc1, 0x96, 0x8b, 0xb9, 0x62, 0xd9, 0x62, 0xc0,
	0xb2, 0xd8, 0xbc, 0xe3, 0x3b, 0xfb, 0xc5, 0x26, 0x8d, 0x9b, 0x0d, 0x7c, 0x7a, 0xfb, 0x37, 0x00,
	0x00, 0xff, 0xff, 0x11, 0x59, 0x55, 0xa4, 0xe1, 0x06, 0x00, 0x00,
}
