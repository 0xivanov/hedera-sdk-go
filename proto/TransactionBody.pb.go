// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.19.0-devel
// 	protoc        v3.11.3
// source: proto/TransactionBody.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(19 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 19)
)

// A single transaction. All transaction types are possible here.
type TransactionBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransactionID            *TransactionID `protobuf:"bytes,1,opt,name=transactionID,proto3" json:"transactionID,omitempty"`                       // The ID for this transaction, which includes the payer's account (the account paying the transaction fee). If two transactions have the same transactionID, they won't both have an effect
	NodeAccountID            *AccountID     `protobuf:"bytes,2,opt,name=nodeAccountID,proto3" json:"nodeAccountID,omitempty"`                       // The account of the node that submits the client's transaction to the network
	TransactionFee           uint64         `protobuf:"varint,3,opt,name=transactionFee,proto3" json:"transactionFee,omitempty"`                    // The maximum transaction fee the client is willing to pay, which is split between the network and the node
	TransactionValidDuration *Duration      `protobuf:"bytes,4,opt,name=transactionValidDuration,proto3" json:"transactionValidDuration,omitempty"` //The transaction is invalid if consensusTimestamp > transactionID.transactionValidStart + transactionValidDuration
	// Deprecated: Do not use.
	GenerateRecord bool   `protobuf:"varint,5,opt,name=generateRecord,proto3" json:"generateRecord,omitempty"` // Should a record of this transaction be generated? (A receipt is always generated, but the record is optional)
	Memo           string `protobuf:"bytes,6,opt,name=memo,proto3" json:"memo,omitempty"`                      // Any notes or descriptions that should be put into the record (max length 100)
	// Types that are assignable to Data:
	//	*TransactionBody_ContractCall
	//	*TransactionBody_ContractCreateInstance
	//	*TransactionBody_ContractUpdateInstance
	//	*TransactionBody_ContractDeleteInstance
	//	*TransactionBody_CryptoAddClaim
	//	*TransactionBody_CryptoCreateAccount
	//	*TransactionBody_CryptoDelete
	//	*TransactionBody_CryptoDeleteClaim
	//	*TransactionBody_CryptoTransfer
	//	*TransactionBody_CryptoUpdateAccount
	//	*TransactionBody_FileAppend
	//	*TransactionBody_FileCreate
	//	*TransactionBody_FileDelete
	//	*TransactionBody_FileUpdate
	//	*TransactionBody_SystemDelete
	//	*TransactionBody_SystemUndelete
	//	*TransactionBody_Freeze
	//	*TransactionBody_ConsensusCreateTopic
	//	*TransactionBody_ConsensusUpdateTopic
	//	*TransactionBody_ConsensusDeleteTopic
	//	*TransactionBody_ConsensusSubmitMessage
	Data isTransactionBody_Data `protobuf_oneof:"data"`
}

func (x *TransactionBody) Reset() {
	*x = TransactionBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_TransactionBody_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionBody) ProtoMessage() {}

func (x *TransactionBody) ProtoReflect() protoreflect.Message {
	mi := &file_proto_TransactionBody_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionBody.ProtoReflect.Descriptor instead.
func (*TransactionBody) Descriptor() ([]byte, []int) {
	return file_proto_TransactionBody_proto_rawDescGZIP(), []int{0}
}

func (x *TransactionBody) GetTransactionID() *TransactionID {
	if x != nil {
		return x.TransactionID
	}
	return nil
}

func (x *TransactionBody) GetNodeAccountID() *AccountID {
	if x != nil {
		return x.NodeAccountID
	}
	return nil
}

func (x *TransactionBody) GetTransactionFee() uint64 {
	if x != nil {
		return x.TransactionFee
	}
	return 0
}

func (x *TransactionBody) GetTransactionValidDuration() *Duration {
	if x != nil {
		return x.TransactionValidDuration
	}
	return nil
}

// Deprecated: Do not use.
func (x *TransactionBody) GetGenerateRecord() bool {
	if x != nil {
		return x.GenerateRecord
	}
	return false
}

func (x *TransactionBody) GetMemo() string {
	if x != nil {
		return x.Memo
	}
	return ""
}

func (m *TransactionBody) GetData() isTransactionBody_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (x *TransactionBody) GetContractCall() *ContractCallTransactionBody {
	if x, ok := x.GetData().(*TransactionBody_ContractCall); ok {
		return x.ContractCall
	}
	return nil
}

func (x *TransactionBody) GetContractCreateInstance() *ContractCreateTransactionBody {
	if x, ok := x.GetData().(*TransactionBody_ContractCreateInstance); ok {
		return x.ContractCreateInstance
	}
	return nil
}

func (x *TransactionBody) GetContractUpdateInstance() *ContractUpdateTransactionBody {
	if x, ok := x.GetData().(*TransactionBody_ContractUpdateInstance); ok {
		return x.ContractUpdateInstance
	}
	return nil
}

func (x *TransactionBody) GetContractDeleteInstance() *ContractDeleteTransactionBody {
	if x, ok := x.GetData().(*TransactionBody_ContractDeleteInstance); ok {
		return x.ContractDeleteInstance
	}
	return nil
}

func (x *TransactionBody) GetCryptoAddClaim() *CryptoAddClaimTransactionBody {
	if x, ok := x.GetData().(*TransactionBody_CryptoAddClaim); ok {
		return x.CryptoAddClaim
	}
	return nil
}

func (x *TransactionBody) GetCryptoCreateAccount() *CryptoCreateTransactionBody {
	if x, ok := x.GetData().(*TransactionBody_CryptoCreateAccount); ok {
		return x.CryptoCreateAccount
	}
	return nil
}

func (x *TransactionBody) GetCryptoDelete() *CryptoDeleteTransactionBody {
	if x, ok := x.GetData().(*TransactionBody_CryptoDelete); ok {
		return x.CryptoDelete
	}
	return nil
}

func (x *TransactionBody) GetCryptoDeleteClaim() *CryptoDeleteClaimTransactionBody {
	if x, ok := x.GetData().(*TransactionBody_CryptoDeleteClaim); ok {
		return x.CryptoDeleteClaim
	}
	return nil
}

func (x *TransactionBody) GetCryptoTransfer() *CryptoTransferTransactionBody {
	if x, ok := x.GetData().(*TransactionBody_CryptoTransfer); ok {
		return x.CryptoTransfer
	}
	return nil
}

func (x *TransactionBody) GetCryptoUpdateAccount() *CryptoUpdateTransactionBody {
	if x, ok := x.GetData().(*TransactionBody_CryptoUpdateAccount); ok {
		return x.CryptoUpdateAccount
	}
	return nil
}

func (x *TransactionBody) GetFileAppend() *FileAppendTransactionBody {
	if x, ok := x.GetData().(*TransactionBody_FileAppend); ok {
		return x.FileAppend
	}
	return nil
}

func (x *TransactionBody) GetFileCreate() *FileCreateTransactionBody {
	if x, ok := x.GetData().(*TransactionBody_FileCreate); ok {
		return x.FileCreate
	}
	return nil
}

func (x *TransactionBody) GetFileDelete() *FileDeleteTransactionBody {
	if x, ok := x.GetData().(*TransactionBody_FileDelete); ok {
		return x.FileDelete
	}
	return nil
}

func (x *TransactionBody) GetFileUpdate() *FileUpdateTransactionBody {
	if x, ok := x.GetData().(*TransactionBody_FileUpdate); ok {
		return x.FileUpdate
	}
	return nil
}

func (x *TransactionBody) GetSystemDelete() *SystemDeleteTransactionBody {
	if x, ok := x.GetData().(*TransactionBody_SystemDelete); ok {
		return x.SystemDelete
	}
	return nil
}

func (x *TransactionBody) GetSystemUndelete() *SystemUndeleteTransactionBody {
	if x, ok := x.GetData().(*TransactionBody_SystemUndelete); ok {
		return x.SystemUndelete
	}
	return nil
}

func (x *TransactionBody) GetFreeze() *FreezeTransactionBody {
	if x, ok := x.GetData().(*TransactionBody_Freeze); ok {
		return x.Freeze
	}
	return nil
}

func (x *TransactionBody) GetConsensusCreateTopic() *ConsensusCreateTopicTransactionBody {
	if x, ok := x.GetData().(*TransactionBody_ConsensusCreateTopic); ok {
		return x.ConsensusCreateTopic
	}
	return nil
}

func (x *TransactionBody) GetConsensusUpdateTopic() *ConsensusUpdateTopicTransactionBody {
	if x, ok := x.GetData().(*TransactionBody_ConsensusUpdateTopic); ok {
		return x.ConsensusUpdateTopic
	}
	return nil
}

func (x *TransactionBody) GetConsensusDeleteTopic() *ConsensusDeleteTopicTransactionBody {
	if x, ok := x.GetData().(*TransactionBody_ConsensusDeleteTopic); ok {
		return x.ConsensusDeleteTopic
	}
	return nil
}

func (x *TransactionBody) GetConsensusSubmitMessage() *ConsensusSubmitMessageTransactionBody {
	if x, ok := x.GetData().(*TransactionBody_ConsensusSubmitMessage); ok {
		return x.ConsensusSubmitMessage
	}
	return nil
}

type isTransactionBody_Data interface {
	isTransactionBody_Data()
}

type TransactionBody_ContractCall struct {
	ContractCall *ContractCallTransactionBody `protobuf:"bytes,7,opt,name=contractCall,proto3,oneof"` // Contains the call a function of a contract instance
}

type TransactionBody_ContractCreateInstance struct {
	ContractCreateInstance *ContractCreateTransactionBody `protobuf:"bytes,8,opt,name=contractCreateInstance,proto3,oneof"` // Contains the create data a contract instance
}

type TransactionBody_ContractUpdateInstance struct {
	ContractUpdateInstance *ContractUpdateTransactionBody `protobuf:"bytes,9,opt,name=contractUpdateInstance,proto3,oneof"` // Contains contract modify info such as expiration date for a contract instance
}

type TransactionBody_ContractDeleteInstance struct {
	ContractDeleteInstance *ContractDeleteTransactionBody `protobuf:"bytes,22,opt,name=contractDeleteInstance,proto3,oneof"` //Delete contract and transfer remaining balance into specified account
}

type TransactionBody_CryptoAddClaim struct {
	CryptoAddClaim *CryptoAddClaimTransactionBody `protobuf:"bytes,10,opt,name=cryptoAddClaim,proto3,oneof"` // Attach a new claim to an account
}

type TransactionBody_CryptoCreateAccount struct {
	CryptoCreateAccount *CryptoCreateTransactionBody `protobuf:"bytes,11,opt,name=cryptoCreateAccount,proto3,oneof"` // Create a new cryptocurrency account
}

type TransactionBody_CryptoDelete struct {
	CryptoDelete *CryptoDeleteTransactionBody `protobuf:"bytes,12,opt,name=cryptoDelete,proto3,oneof"` // Delete a cryptocurrency account (mark as deleted, and transfer hbars out)
}

type TransactionBody_CryptoDeleteClaim struct {
	CryptoDeleteClaim *CryptoDeleteClaimTransactionBody `protobuf:"bytes,13,opt,name=cryptoDeleteClaim,proto3,oneof"` // Remove a claim from an account
}

type TransactionBody_CryptoTransfer struct {
	CryptoTransfer *CryptoTransferTransactionBody `protobuf:"bytes,14,opt,name=cryptoTransfer,proto3,oneof"` // Transfer amount between accounts
}

type TransactionBody_CryptoUpdateAccount struct {
	CryptoUpdateAccount *CryptoUpdateTransactionBody `protobuf:"bytes,15,opt,name=cryptoUpdateAccount,proto3,oneof"` // Modify information such as the expiration date for an account
}

type TransactionBody_FileAppend struct {
	FileAppend *FileAppendTransactionBody `protobuf:"bytes,16,opt,name=fileAppend,proto3,oneof"` // Add bytes to the end of the contents of a file
}

type TransactionBody_FileCreate struct {
	FileCreate *FileCreateTransactionBody `protobuf:"bytes,17,opt,name=fileCreate,proto3,oneof"` // Create a new file
}

type TransactionBody_FileDelete struct {
	FileDelete *FileDeleteTransactionBody `protobuf:"bytes,18,opt,name=fileDelete,proto3,oneof"` // Delete a file (remove contents and mark as deleted until it expires)
}

type TransactionBody_FileUpdate struct {
	FileUpdate *FileUpdateTransactionBody `protobuf:"bytes,19,opt,name=fileUpdate,proto3,oneof"` // Modify information such as the expiration date for a file
}

type TransactionBody_SystemDelete struct {
	SystemDelete *SystemDeleteTransactionBody `protobuf:"bytes,20,opt,name=systemDelete,proto3,oneof"` // Hedera multisig system deletes a file or smart contract
}

type TransactionBody_SystemUndelete struct {
	SystemUndelete *SystemUndeleteTransactionBody `protobuf:"bytes,21,opt,name=systemUndelete,proto3,oneof"` //To undelete an entity deleted by SystemDelete
}

type TransactionBody_Freeze struct {
	Freeze *FreezeTransactionBody `protobuf:"bytes,23,opt,name=freeze,proto3,oneof"` // Freeze the nodes
}

type TransactionBody_ConsensusCreateTopic struct {
	ConsensusCreateTopic *ConsensusCreateTopicTransactionBody `protobuf:"bytes,24,opt,name=consensusCreateTopic,proto3,oneof"`
}

type TransactionBody_ConsensusUpdateTopic struct {
	ConsensusUpdateTopic *ConsensusUpdateTopicTransactionBody `protobuf:"bytes,25,opt,name=consensusUpdateTopic,proto3,oneof"`
}

type TransactionBody_ConsensusDeleteTopic struct {
	ConsensusDeleteTopic *ConsensusDeleteTopicTransactionBody `protobuf:"bytes,26,opt,name=consensusDeleteTopic,proto3,oneof"`
}

type TransactionBody_ConsensusSubmitMessage struct {
	ConsensusSubmitMessage *ConsensusSubmitMessageTransactionBody `protobuf:"bytes,27,opt,name=consensusSubmitMessage,proto3,oneof"`
}

func (*TransactionBody_ContractCall) isTransactionBody_Data() {}

func (*TransactionBody_ContractCreateInstance) isTransactionBody_Data() {}

func (*TransactionBody_ContractUpdateInstance) isTransactionBody_Data() {}

func (*TransactionBody_ContractDeleteInstance) isTransactionBody_Data() {}

func (*TransactionBody_CryptoAddClaim) isTransactionBody_Data() {}

func (*TransactionBody_CryptoCreateAccount) isTransactionBody_Data() {}

func (*TransactionBody_CryptoDelete) isTransactionBody_Data() {}

func (*TransactionBody_CryptoDeleteClaim) isTransactionBody_Data() {}

func (*TransactionBody_CryptoTransfer) isTransactionBody_Data() {}

func (*TransactionBody_CryptoUpdateAccount) isTransactionBody_Data() {}

func (*TransactionBody_FileAppend) isTransactionBody_Data() {}

func (*TransactionBody_FileCreate) isTransactionBody_Data() {}

func (*TransactionBody_FileDelete) isTransactionBody_Data() {}

func (*TransactionBody_FileUpdate) isTransactionBody_Data() {}

func (*TransactionBody_SystemDelete) isTransactionBody_Data() {}

func (*TransactionBody_SystemUndelete) isTransactionBody_Data() {}

func (*TransactionBody_Freeze) isTransactionBody_Data() {}

func (*TransactionBody_ConsensusCreateTopic) isTransactionBody_Data() {}

func (*TransactionBody_ConsensusUpdateTopic) isTransactionBody_Data() {}

func (*TransactionBody_ConsensusDeleteTopic) isTransactionBody_Data() {}

func (*TransactionBody_ConsensusSubmitMessage) isTransactionBody_Data() {}

var File_proto_TransactionBody_proto protoreflect.FileDescriptor

var file_proto_TransactionBody_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x6f, 0x64, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x55, 0x6e, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x46, 0x72, 0x65, 0x65, 0x7a, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x43, 0x61,
	0x6c, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1a, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x41, 0x64,
	0x64, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x43, 0x72,
	0x79, 0x70, 0x74, 0x6f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1a, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x46, 0x69, 0x6c,
	0x65, 0x41, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x46, 0x69, 0x6c, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x46, 0x69, 0x6c,
	0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x46, 0x69, 0x6c, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x42, 0x61, 0x73, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x20, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x20, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73,
	0x75, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x43, 0x6f, 0x6e, 0x73, 0x65,
	0x6e, 0x73, 0x75, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x22, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x43, 0x6f, 0x6e,
	0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8f, 0x10, 0x0a, 0x0f, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x3a, 0x0a,
	0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x36, 0x0a, 0x0d, 0x6e, 0x6f, 0x64,
	0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x44, 0x52, 0x0d, 0x6e, 0x6f, 0x64, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x44, 0x12, 0x26, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x46, 0x65, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x65, 0x65, 0x12, 0x4b, 0x0a, 0x18, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x18, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x0e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x42, 0x02,
	0x18, 0x01, 0x52, 0x0e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x12, 0x48, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x43, 0x61, 0x6c,
	0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6f, 0x64, 0x79,
	0x48, 0x00, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x43, 0x61, 0x6c, 0x6c,
	0x12, 0x5e, 0x0a, 0x16, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x6f, 0x64, 0x79, 0x48, 0x00, 0x52, 0x16, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x12, 0x5e, 0x0a, 0x16, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x6f, 0x64, 0x79, 0x48, 0x00, 0x52, 0x16, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x12, 0x5e, 0x0a, 0x16, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x6f, 0x64, 0x79, 0x48, 0x00, 0x52, 0x16, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x12, 0x4e, 0x0a, 0x0e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x41, 0x64, 0x64, 0x43, 0x6c, 0x61,
	0x69, 0x6d, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x41, 0x64, 0x64, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6f, 0x64, 0x79, 0x48, 0x00,
	0x52, 0x0e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x41, 0x64, 0x64, 0x43, 0x6c, 0x61, 0x69, 0x6d,
	0x12, 0x56, 0x0a, 0x13, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6f, 0x64,
	0x79, 0x48, 0x00, 0x52, 0x13, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x48, 0x0a, 0x0c, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x6f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6f,
	0x64, 0x79, 0x48, 0x00, 0x52, 0x0c, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x12, 0x57, 0x0a, 0x11, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x6f, 0x64, 0x79, 0x48, 0x00, 0x52, 0x11, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x12, 0x4e, 0x0a, 0x0e, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x6f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x72, 0x79, 0x70,
	0x74, 0x6f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6f, 0x64, 0x79, 0x48, 0x00, 0x52, 0x0e, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x6f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x56, 0x0a, 0x13, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x6f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6f, 0x64, 0x79, 0x48, 0x00, 0x52, 0x13,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x42, 0x0a, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x41, 0x70, 0x70, 0x65, 0x6e,
	0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x46, 0x69, 0x6c, 0x65, 0x41, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6f, 0x64, 0x79, 0x48, 0x00, 0x52, 0x0a, 0x66, 0x69, 0x6c,
	0x65, 0x41, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x12, 0x42, 0x0a, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6f, 0x64, 0x79, 0x48, 0x00, 0x52,
	0x0a, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x42, 0x0a, 0x0a, 0x66,
	0x69, 0x6c, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6f, 0x64,
	0x79, 0x48, 0x00, 0x52, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12,
	0x42, 0x0a, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x69, 0x6c, 0x65,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x6f, 0x64, 0x79, 0x48, 0x00, 0x52, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x12, 0x48, 0x0a, 0x0c, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6f, 0x64, 0x79, 0x48, 0x00, 0x52,
	0x0c, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x4e, 0x0a,
	0x0e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x55, 0x6e, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x55, 0x6e, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6f, 0x64, 0x79, 0x48, 0x00, 0x52, 0x0e, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x55, 0x6e, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x36, 0x0a,
	0x06, 0x66, 0x72, 0x65, 0x65, 0x7a, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x72, 0x65, 0x65, 0x7a, 0x65, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6f, 0x64, 0x79, 0x48, 0x00, 0x52, 0x06, 0x66,
	0x72, 0x65, 0x65, 0x7a, 0x65, 0x12, 0x60, 0x0a, 0x14, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73,
	0x75, 0x73, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x18, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x73,
	0x65, 0x6e, 0x73, 0x75, 0x73, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x70, 0x69, 0x63,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6f, 0x64, 0x79, 0x48,
	0x00, 0x52, 0x14, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x60, 0x0a, 0x14, 0x63, 0x6f, 0x6e, 0x73, 0x65,
	0x6e, 0x73, 0x75, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x18,
	0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f,
	0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x70,
	0x69, 0x63, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6f, 0x64,
	0x79, 0x48, 0x00, 0x52, 0x14, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x60, 0x0a, 0x14, 0x63, 0x6f, 0x6e,
	0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x6f, 0x70, 0x69,
	0x63, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54,
	0x6f, 0x70, 0x69, 0x63, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x6f, 0x64, 0x79, 0x48, 0x00, 0x52, 0x14, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x66, 0x0a, 0x16, 0x63,
	0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x53, 0x75, 0x62,
	0x6d, 0x69, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6f, 0x64, 0x79, 0x48, 0x00, 0x52, 0x16, 0x63, 0x6f, 0x6e,
	0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x42, 0x48, 0x0a, 0x1a, 0x63,
	0x6f, 0x6d, 0x2e, 0x68, 0x65, 0x64, 0x65, 0x72, 0x61, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x67, 0x72,
	0x61, 0x70, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x28, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x68, 0x61, 0x73, 0x68, 0x67, 0x72, 0x61, 0x70,
	0x68, 0x2f, 0x68, 0x65, 0x64, 0x65, 0x72, 0x61, 0x2d, 0x73, 0x64, 0x6b, 0x2d, 0x67, 0x6f, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_TransactionBody_proto_rawDescOnce sync.Once
	file_proto_TransactionBody_proto_rawDescData = file_proto_TransactionBody_proto_rawDesc
)

func file_proto_TransactionBody_proto_rawDescGZIP() []byte {
	file_proto_TransactionBody_proto_rawDescOnce.Do(func() {
		file_proto_TransactionBody_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_TransactionBody_proto_rawDescData)
	})
	return file_proto_TransactionBody_proto_rawDescData
}

var file_proto_TransactionBody_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_proto_TransactionBody_proto_goTypes = []interface{}{
	(*TransactionBody)(nil),                       // 0: proto.TransactionBody
	(*TransactionID)(nil),                         // 1: proto.TransactionID
	(*AccountID)(nil),                             // 2: proto.AccountID
	(*Duration)(nil),                              // 3: proto.Duration
	(*ContractCallTransactionBody)(nil),           // 4: proto.ContractCallTransactionBody
	(*ContractCreateTransactionBody)(nil),         // 5: proto.ContractCreateTransactionBody
	(*ContractUpdateTransactionBody)(nil),         // 6: proto.ContractUpdateTransactionBody
	(*ContractDeleteTransactionBody)(nil),         // 7: proto.ContractDeleteTransactionBody
	(*CryptoAddClaimTransactionBody)(nil),         // 8: proto.CryptoAddClaimTransactionBody
	(*CryptoCreateTransactionBody)(nil),           // 9: proto.CryptoCreateTransactionBody
	(*CryptoDeleteTransactionBody)(nil),           // 10: proto.CryptoDeleteTransactionBody
	(*CryptoDeleteClaimTransactionBody)(nil),      // 11: proto.CryptoDeleteClaimTransactionBody
	(*CryptoTransferTransactionBody)(nil),         // 12: proto.CryptoTransferTransactionBody
	(*CryptoUpdateTransactionBody)(nil),           // 13: proto.CryptoUpdateTransactionBody
	(*FileAppendTransactionBody)(nil),             // 14: proto.FileAppendTransactionBody
	(*FileCreateTransactionBody)(nil),             // 15: proto.FileCreateTransactionBody
	(*FileDeleteTransactionBody)(nil),             // 16: proto.FileDeleteTransactionBody
	(*FileUpdateTransactionBody)(nil),             // 17: proto.FileUpdateTransactionBody
	(*SystemDeleteTransactionBody)(nil),           // 18: proto.SystemDeleteTransactionBody
	(*SystemUndeleteTransactionBody)(nil),         // 19: proto.SystemUndeleteTransactionBody
	(*FreezeTransactionBody)(nil),                 // 20: proto.FreezeTransactionBody
	(*ConsensusCreateTopicTransactionBody)(nil),   // 21: proto.ConsensusCreateTopicTransactionBody
	(*ConsensusUpdateTopicTransactionBody)(nil),   // 22: proto.ConsensusUpdateTopicTransactionBody
	(*ConsensusDeleteTopicTransactionBody)(nil),   // 23: proto.ConsensusDeleteTopicTransactionBody
	(*ConsensusSubmitMessageTransactionBody)(nil), // 24: proto.ConsensusSubmitMessageTransactionBody
}
var file_proto_TransactionBody_proto_depIdxs = []int32{
	1,  // 0: proto.TransactionBody.transactionID:type_name -> proto.TransactionID
	2,  // 1: proto.TransactionBody.nodeAccountID:type_name -> proto.AccountID
	3,  // 2: proto.TransactionBody.transactionValidDuration:type_name -> proto.Duration
	4,  // 3: proto.TransactionBody.contractCall:type_name -> proto.ContractCallTransactionBody
	5,  // 4: proto.TransactionBody.contractCreateInstance:type_name -> proto.ContractCreateTransactionBody
	6,  // 5: proto.TransactionBody.contractUpdateInstance:type_name -> proto.ContractUpdateTransactionBody
	7,  // 6: proto.TransactionBody.contractDeleteInstance:type_name -> proto.ContractDeleteTransactionBody
	8,  // 7: proto.TransactionBody.cryptoAddClaim:type_name -> proto.CryptoAddClaimTransactionBody
	9,  // 8: proto.TransactionBody.cryptoCreateAccount:type_name -> proto.CryptoCreateTransactionBody
	10, // 9: proto.TransactionBody.cryptoDelete:type_name -> proto.CryptoDeleteTransactionBody
	11, // 10: proto.TransactionBody.cryptoDeleteClaim:type_name -> proto.CryptoDeleteClaimTransactionBody
	12, // 11: proto.TransactionBody.cryptoTransfer:type_name -> proto.CryptoTransferTransactionBody
	13, // 12: proto.TransactionBody.cryptoUpdateAccount:type_name -> proto.CryptoUpdateTransactionBody
	14, // 13: proto.TransactionBody.fileAppend:type_name -> proto.FileAppendTransactionBody
	15, // 14: proto.TransactionBody.fileCreate:type_name -> proto.FileCreateTransactionBody
	16, // 15: proto.TransactionBody.fileDelete:type_name -> proto.FileDeleteTransactionBody
	17, // 16: proto.TransactionBody.fileUpdate:type_name -> proto.FileUpdateTransactionBody
	18, // 17: proto.TransactionBody.systemDelete:type_name -> proto.SystemDeleteTransactionBody
	19, // 18: proto.TransactionBody.systemUndelete:type_name -> proto.SystemUndeleteTransactionBody
	20, // 19: proto.TransactionBody.freeze:type_name -> proto.FreezeTransactionBody
	21, // 20: proto.TransactionBody.consensusCreateTopic:type_name -> proto.ConsensusCreateTopicTransactionBody
	22, // 21: proto.TransactionBody.consensusUpdateTopic:type_name -> proto.ConsensusUpdateTopicTransactionBody
	23, // 22: proto.TransactionBody.consensusDeleteTopic:type_name -> proto.ConsensusDeleteTopicTransactionBody
	24, // 23: proto.TransactionBody.consensusSubmitMessage:type_name -> proto.ConsensusSubmitMessageTransactionBody
	24, // [24:24] is the sub-list for method output_type
	24, // [24:24] is the sub-list for method input_type
	24, // [24:24] is the sub-list for extension type_name
	24, // [24:24] is the sub-list for extension extendee
	0,  // [0:24] is the sub-list for field type_name
}

func init() { file_proto_TransactionBody_proto_init() }
func file_proto_TransactionBody_proto_init() {
	if File_proto_TransactionBody_proto != nil {
		return
	}
	file_proto_SystemDelete_proto_init()
	file_proto_SystemUndelete_proto_init()
	file_proto_Freeze_proto_init()
	file_proto_ContractCall_proto_init()
	file_proto_ContractCreate_proto_init()
	file_proto_ContractUpdate_proto_init()
	file_proto_CryptoAddClaim_proto_init()
	file_proto_CryptoCreate_proto_init()
	file_proto_CryptoDelete_proto_init()
	file_proto_CryptoDeleteClaim_proto_init()
	file_proto_CryptoTransfer_proto_init()
	file_proto_CryptoUpdate_proto_init()
	file_proto_FileAppend_proto_init()
	file_proto_FileCreate_proto_init()
	file_proto_FileDelete_proto_init()
	file_proto_FileUpdate_proto_init()
	file_proto_Duration_proto_init()
	file_proto_BasicTypes_proto_init()
	file_proto_ContractDelete_proto_init()
	file_proto_ConsensusCreateTopic_proto_init()
	file_proto_ConsensusUpdateTopic_proto_init()
	file_proto_ConsensusDeleteTopic_proto_init()
	file_proto_ConsensusSubmitMessage_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_proto_TransactionBody_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_proto_TransactionBody_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*TransactionBody_ContractCall)(nil),
		(*TransactionBody_ContractCreateInstance)(nil),
		(*TransactionBody_ContractUpdateInstance)(nil),
		(*TransactionBody_ContractDeleteInstance)(nil),
		(*TransactionBody_CryptoAddClaim)(nil),
		(*TransactionBody_CryptoCreateAccount)(nil),
		(*TransactionBody_CryptoDelete)(nil),
		(*TransactionBody_CryptoDeleteClaim)(nil),
		(*TransactionBody_CryptoTransfer)(nil),
		(*TransactionBody_CryptoUpdateAccount)(nil),
		(*TransactionBody_FileAppend)(nil),
		(*TransactionBody_FileCreate)(nil),
		(*TransactionBody_FileDelete)(nil),
		(*TransactionBody_FileUpdate)(nil),
		(*TransactionBody_SystemDelete)(nil),
		(*TransactionBody_SystemUndelete)(nil),
		(*TransactionBody_Freeze)(nil),
		(*TransactionBody_ConsensusCreateTopic)(nil),
		(*TransactionBody_ConsensusUpdateTopic)(nil),
		(*TransactionBody_ConsensusDeleteTopic)(nil),
		(*TransactionBody_ConsensusSubmitMessage)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_TransactionBody_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_TransactionBody_proto_goTypes,
		DependencyIndexes: file_proto_TransactionBody_proto_depIdxs,
		MessageInfos:      file_proto_TransactionBody_proto_msgTypes,
	}.Build()
	File_proto_TransactionBody_proto = out.File
	file_proto_TransactionBody_proto_rawDesc = nil
	file_proto_TransactionBody_proto_goTypes = nil
	file_proto_TransactionBody_proto_depIdxs = nil
}
